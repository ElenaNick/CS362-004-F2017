        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 387 returned 100% blocks executed 100%
      387:    8:int compare(const void* a, const void* b) {
      387:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
       37:   10:    return 1;
      350:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
      166:   12:    return -1;
      184:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 89%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 100%
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 13% (fallthrough)
branch  3 taken 88%
        -:   49:    {
        1:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       77:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      770:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        7:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        7:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:  state->supplyCount[silver] = 40;
        7:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      147:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1155:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1085:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       70:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       14:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       63:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       70:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       21:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       14:  140:      state->deckCount[i] = 0;
       56:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       42:  143:	  state->deck[i][j] = estate;
       42:  144:	  state->deckCount[i]++;
        -:  145:	}
      112:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       98:  148:	  state->deck[i][j] = copper;
       98:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       21:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       14:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       21:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       14:  166:      state->handCount[i] = 0;
       14:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      196:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      189:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        7:  182:  state->outpostPlayed = 0;
        7:  183:  state->phase = 0;
        7:  184:  state->numActions = 1;
        7:  185:  state->numBuys = 1;
        7:  186:  state->playedCardCount = 0;
        7:  187:  state->whoseTurn = 0;
        7:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       42:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       35:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        7:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        7:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 57 returned 100% blocks executed 100%
       57:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       57:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       57:  209:  if (state->deckCount[player] < 1)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
       40:  210:    return -1;
       17:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      214:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      180:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      180:  216:    newDeck[newDeckPos] = state->deck[player][card];
      180:  217:    newDeckPos++;
      716:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      536:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      180:  221:    state->deckCount[player]--;
        -:  222:  }
      197:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      180:  224:    state->deck[player][i] = newDeck[i];
      180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       17:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2175823187 returned 100% blocks executed 100%
2175823187:  320:int supplyCount(int card, struct gameState *state) {
2175823187:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 141 returned 100% blocks executed 100%
      141:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      141:  326:  int count = 0;
        -:  327:
     2891:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  329:    {
     2750:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  331:    }
        -:  332:
     3341:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  334:    {
     3200:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  336:    }
        -:  337:
     3791:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  339:    {
     3650:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  341:    }
        -:  342:
      141:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 12 returned 100% blocks executed 100%
       12:  346:int whoseTurn(struct gameState *state) {
       12:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 25 returned 100% blocks executed 100%
       25:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       25:  420:  int score = 0;
        -:  421:  //score from hand
      415:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  423:    {
      390:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
      415:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  434:    {
      390:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
      415:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  445:    {
      390:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      390:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
call    2 returned 100%
        -:  452:    }
        -:  453:
       25:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 125 returned 100% blocks executed 100%
      125:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      125:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       41:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 49%
branch  1 taken 51% (fallthrough)
       20:  534:      state->deck[player][i] = state->discard[player][i];
       20:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       21:  538:    state->deckCount[player] = state->discardCount[player];
       21:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       21:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       21:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       21:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       21:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       21:  559:    if (deckCounter == 0)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
       19:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      104:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      104:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      104:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      104:  576:    state->deckCount[player]--;
      104:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      106:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 4 returned 100% blocks executed 13%
        4:  583:int getCost(int cardNumber)
        -:  584:{
        4:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 25%
branch  6 taken 0%
branch  7 taken 75%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        3:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerCase called 6 returned 100% blocks executed 100%
        6:  646:int adventurerCase(struct gameState *state, int currentPlayer, int temphand[])
        -:  647:{
        6:  648:  int drawntreasure=0;
        -:  649:  int cardDrawn;
        6:  650:  int z = 0;// this is the counter for the temp hand
        -:  651:  
       84:  652:  while(drawntreasure<2){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       72:  653:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       20:  654:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -:  655:	}
       72:  656:	drawCard(currentPlayer, state);
call    0 returned 100%
       72:  657:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       72:  658:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
       12:  659:	  drawntreasure++;
        -:  660:	else{
       60:  661:	  temphand[z]=cardDrawn;
       60:  662:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       60:  663:	  z++;
        -:  664:	}
        -:  665:  }
       66:  666:  while(z-1>0){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       54:  667:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       54:  668:	z=z-1;
        -:  669:  }
        6:  670:  return 0;
        -:  671:}
        -:  672:
function smithyCase called 2 returned 100% blocks executed 100%
        2:  673:int smithyCase(struct gameState *state, int currentPlayer, int handPos)
        -:  674:{
        -:  675:    int i;
        -:  676:    //+3 Cards
       10:  677:    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  678:	{
        8:  679:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  680:	}
        -:  681:			
        -:  682:    //discard card from hand
        2:  683:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  684:    return 0;
        -:  685:}
        -:  686:
function feastCase called 2 returned 50% blocks executed 94%
        2:  687:int feastCase(struct gameState *state, int currentPlayer, int choice1, int temphand[])
        -:  688:{
        -:  689:    int i, x;
        -:  690:    //gain card with cost up to 5
        -:  691:    //Backup hand
       14:  692:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       12:  693:	  temphand[i] = state->hand[currentPlayer][i];//Backup card
       12:  694:	  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  695:    }
        -:  696:    //Backup hand
        -:  697:
        -:  698:    //Update Coins for Buy
        2:  699:    updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        2:  700:    x = 1;//Condition to loop on
2175823064:  701:    while( x == 1) {//Buy one card
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
2175823061:  702:	  if (supplyCount(choice1, state) <= 0){
call    0 returned 99%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  703:	    if (DEBUG)
        -:  704:	      printf("None of that card left, sorry!\n");
        -:  705:
        -:  706:	    if (DEBUG){
        -:  707:	      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  708:	    }
        -:  709:	  }
        1:  710:	  else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  711:	    printf("That card is too expensive!\n");
call    0 never executed
        -:  712:
        -:  713:	    if (DEBUG){
        -:  714:	      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  715:	    }
        -:  716:	  }
        -:  717:	  else{
        -:  718:
        -:  719:	    if (DEBUG){
        -:  720:	      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  721:	    }
        -:  722:
        1:  723:	    gainCard(choice1, state, 2, currentPlayer);//Gain the card
call    0 returned 100%
        1:  724:	    x = 0;//No more buying cards
        -:  725:
        -:  726:	    if (DEBUG){
        -:  727:	      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	    }
        -:  729:	  }
        -:  730:     }     
        -:  731:
        -:  732:    //Reset Hand
        8:  733:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        7:  734:	  state->hand[currentPlayer][i] = temphand[i];
        7:  735:	  temphand[i] = -1;
        -:  736:    }
        -:  737:    //Reset Hand
        -:  738:      			
        1:  739:    return 0;
        -:  740:}
        -:  741:
function remodelCase called 0 returned 0% blocks executed 0%
    #####:  742:int remodelCase(int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos)
        -:  743:{
        -:  744:	int i;
    #####:  745:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  746:
    #####:  747:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  753:
        -:  754:    //discard card from hand
    #####:  755:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  756:
        -:  757:    //discard trashed card
    #####:  758:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  761:	  {
    #####:  762:	    discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  763:	    break;
        -:  764:	  }
        -:  765:	}
        -:  766:	
    #####:  767:    return 0;	
        -:  768:}	
        -:  769:
        -:  770:
function council_roomCase called 2 returned 100% blocks executed 100%
        2:  771:int council_roomCase(int currentPlayer, struct gameState *state, int handPos)
        -:  772:{
        -:  773:    int i;
        -:  774:	//+4 Cards
       10:  775:    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  776:	{
        8:  777:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  778:	}
        -:  779:			
        -:  780:    //+1 Buy
        2:  781:    state->numBuys++;
        -:  782:			
        -:  783:    //Each other player draws a card
        5:  784:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:  785:	{
        3:  786:	  if ( i == currentPlayer )
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  787:	  {
        2:  788:	    drawCard(i, state);
call    0 returned 100%
        -:  789:	  }
        -:  790:	}
        -:  791:			
        -:  792:    //put played card in played card pile
        2:  793:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  794:			
        2:  795:    return 0;
        -:  796:}
        -:  797:	  
function cardEffect called 12 returned 92% blocks executed 5%
       12:  798:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  799:{
        -:  800:  int i;
        -:  801:  int j;
        -:  802:  int k;
        -:  803:  int index;
       12:  804:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
       12:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  int temphand[MAX_HAND];// moved above the if statement
       12:  809:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        1:  810:    nextPlayer = 0;
        -:  811:  }
        -:  812:	
        -:  813:	
        -:  814:  //uses switch to select card and perform actions
       12:  815:  switch( card ) 
branch  0 taken 50%
branch  1 taken 17%
branch  2 taken 17%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  816:    {		
        -:  817:    case adventurer:
        6:  818:	  return adventurerCase(state, currentPlayer, temphand);
call    0 returned 100%
        -:  819:	  
        -:  820:    case council_room:
        2:  821:	  return council_roomCase(currentPlayer, state, handPos);
call    0 returned 100%
        -:  822:
        -:  823:    case feast:
        2:  824:	  return feastCase(state, currentPlayer, choice1, temphand);
call    0 returned 50%
        -:  825:
        -:  826:    case gardens:
    #####:  827:      return -1;
        -:  828:			
        -:  829:    case mine:
    #####:  830:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  831:
    #####:  832:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  833:	{
    #####:  834:	  return -1;
        -:  835:	}
        -:  836:		
    #####:  837:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  838:	{
    #####:  839:	  return -1;
        -:  840:	}
        -:  841:
    #####:  842:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  843:	{
    #####:  844:	  return -1;
        -:  845:	}
        -:  846:
    #####:  847:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  848:
        -:  849:      //discard card from hand
    #####:  850:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  851:
        -:  852:      //discard trashed card
    #####:  853:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  854:	{
    #####:  855:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  858:	      break;
        -:  859:	    }
        -:  860:	}
        -:  861:			
    #####:  862:      return 0;
        -:  863:			
        -:  864:    case remodel:
    #####:  865:	  return remodelCase(choice1, choice2, currentPlayer, state, handPos);
call    0 never executed
        -:  866:		
        -:  867:    case smithy:
        2:  868:	  return smithyCase(state, currentPlayer, handPos);
call    0 returned 100%
        -:  869:		
        -:  870:    case village:
        -:  871:      //+1 Card
    #####:  872:      drawCard(currentPlayer, state);
call    0 never executed
        -:  873:			
        -:  874:      //+2 Actions
    #####:  875:      state->numActions = state->numActions + 2;
        -:  876:			
        -:  877:      //discard played card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  879:      return 0;
        -:  880:		
        -:  881:    case baron:
    #####:  882:      state->numBuys++;//Increase buys by 1!
    #####:  883:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  884:	int p = 0;//Iterator for hand!
    #####:  885:	int card_not_discarded = 1;//Flag for discard set!
    #####:  886:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  887:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  888:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  889:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  890:	    state->discardCount[currentPlayer]++;
    #####:  891:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  892:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  893:	    }
    #####:  894:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  895:	    state->handCount[currentPlayer]--;
    #####:  896:	    card_not_discarded = 0;//Exit the loop
        -:  897:	  }
    #####:  898:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  899:	    if(DEBUG) {
        -:  900:	      printf("No estate cards in your hand, invalid choice\n");
        -:  901:	      printf("Must gain an estate if there are any\n");
        -:  902:	    }
    #####:  903:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  905:	      state->supplyCount[estate]--;//Decrement estates
    #####:  906:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  907:		isGameOver(state);
call    0 never executed
        -:  908:	      }
        -:  909:	    }
    #####:  910:	    card_not_discarded = 0;//Exit the loop
        -:  911:	  }
        -:  912:			    
        -:  913:	  else{
    #####:  914:	    p++;//Next card
        -:  915:	  }
        -:  916:	}
        -:  917:      }
        -:  918:			    
        -:  919:      else{
    #####:  920:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  921:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  922:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  923:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  924:	    isGameOver(state);
call    0 never executed
        -:  925:	  }
        -:  926:	}
        -:  927:      }
        -:  928:	    
        -:  929:      
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case great_hall:
        -:  933:      //+1 Card
    #####:  934:      drawCard(currentPlayer, state);
call    0 never executed
        -:  935:			
        -:  936:      //+1 Actions
    #####:  937:      state->numActions++;
        -:  938:			
        -:  939:      //discard card from hand
    #####:  940:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  941:      return 0;
        -:  942:		
        -:  943:    case minion:
        -:  944:      //+1 action
    #####:  945:      state->numActions++;
        -:  946:			
        -:  947:      //discard card from hand
    #####:  948:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  949:			
    #####:  950:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  951:	{
    #####:  952:	  state->coins = state->coins + 2;
        -:  953:	}
        -:  954:			
    #####:  955:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  956:	{
        -:  957:	  //discard hand
    #####:  958:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  959:	    {
    #####:  960:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  961:	    }
        -:  962:				
        -:  963:	  //draw 4
    #####:  964:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  965:	    {
    #####:  966:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  967:	    }
        -:  968:				
        -:  969:	  //other players discard hand and redraw if hand size > 4
    #####:  970:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  971:	    {
    #####:  972:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  973:		{
    #####:  974:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  975:		    {
        -:  976:		      //discard hand
    #####:  977:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  978:			{
    #####:  979:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  980:			}
        -:  981:							
        -:  982:		      //draw 4
    #####:  983:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  984:			{
    #####:  985:			  drawCard(i, state);
call    0 never executed
        -:  986:			}
        -:  987:		    }
        -:  988:		}
        -:  989:	    }
        -:  990:				
        -:  991:	}
    #####:  992:      return 0;
        -:  993:		
        -:  994:    case steward:
    #####:  995:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  996:	{
        -:  997:	  //+2 cards
    #####:  998:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  999:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1000:	}
    #####: 1001:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1002:	{
        -: 1003:	  //+2 coins
    #####: 1004:	  state->coins = state->coins + 2;
        -: 1005:	}
        -: 1006:      else
        -: 1007:	{
        -: 1008:	  //trash 2 cards in hand
    #####: 1009:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1010:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1011:	}
        -: 1012:			
        -: 1013:      //discard card from hand
    #####: 1014:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1015:      return 0;
        -: 1016:		
        -: 1017:    case tribute:
    #####: 1018:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1019:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1020:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:	  state->deckCount[nextPlayer]--;
        -: 1022:	}
    #####: 1023:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1024:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1025:	  state->discardCount[nextPlayer]--;
        -: 1026:	}
        -: 1027:	else{
        -: 1028:	  //No Card to Reveal
        -: 1029:	  if (DEBUG){
        -: 1030:	    printf("No cards to reveal\n");
        -: 1031:	  }
        -: 1032:	}
        -: 1033:      }
        -: 1034:	    
        -: 1035:      else{
    #####: 1036:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1037:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1038:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1039:	    state->deckCount[nextPlayer]++;
    #####: 1040:	    state->discard[nextPlayer][i] = -1;
    #####: 1041:	    state->discardCount[nextPlayer]--;
        -: 1042:	  }
        -: 1043:			    
    #####: 1044:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1045:	} 
    #####: 1046:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:	state->deckCount[nextPlayer]--;
    #####: 1049:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
        -: 1052:      }    
        -: 1053:		       
    #####: 1054:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1055:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1056:	state->playedCardCount++;
    #####: 1057:	tributeRevealedCards[1] = -1;
        -: 1058:      }
        -: 1059:
    #####: 1060:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1061:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1062:	  state->coins += 2;
        -: 1063:	}
        -: 1064:		    
    #####: 1065:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1066:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1067:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1068:	}
        -: 1069:	else{//Action Card
    #####: 1070:	  state->numActions = state->numActions + 2;
        -: 1071:	}
        -: 1072:      }
        -: 1073:	    
    #####: 1074:      return 0;
        -: 1075:		
        -: 1076:    case ambassador:
    #####: 1077:      j = 0;		//used to check if player has enough cards to discard
        -: 1078:
    #####: 1079:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1080:	{
    #####: 1081:	  return -1;				
        -: 1082:	}
        -: 1083:
    #####: 1084:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1085:	{
    #####: 1086:	  return -1;
        -: 1087:	}
        -: 1088:
    #####: 1089:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1090:	{
    #####: 1091:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1092:	    {
    #####: 1093:	      j++;
        -: 1094:	    }
        -: 1095:	}
    #####: 1096:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  return -1;				
        -: 1099:	}
        -: 1100:
        -: 1101:      if (DEBUG) 
        -: 1102:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1103:
        -: 1104:      //increase supply count for choosen card by amount being discarded
    #####: 1105:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1106:			
        -: 1107:      //each other player gains a copy of revealed card
    #####: 1108:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1111:	    {
    #####: 1112:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1113:	    }
        -: 1114:	}
        -: 1115:
        -: 1116:      //discard played card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1118:
        -: 1119:      //trash copies of cards returned to supply
    #####: 1120:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1123:	    {
    #####: 1124:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1125:		{
    #####: 1126:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1127:		  break;
        -: 1128:		}
        -: 1129:	    }
        -: 1130:	}			
        -: 1131:
    #####: 1132:      return 0;
        -: 1133:		
        -: 1134:    case cutpurse:
        -: 1135:
    #####: 1136:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1140:	    {
    #####: 1141:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1142:		{
    #####: 1143:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1144:		    {
    #####: 1145:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1146:		      break;
        -: 1147:		    }
    #####: 1148:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1149:		    {
    #####: 1150:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1151:			{
        -: 1152:			  if (DEBUG)
        -: 1153:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1154:			}	
    #####: 1155:		      break;
        -: 1156:		    }		
        -: 1157:		}
        -: 1158:					
        -: 1159:	    }
        -: 1160:				
        -: 1161:	}				
        -: 1162:
        -: 1163:      //discard played card from hand
    #####: 1164:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1165:
    #####: 1166:      return 0;
        -: 1167:
        -: 1168:		
        -: 1169:    case embargo: 
        -: 1170:      //+2 Coins
    #####: 1171:      state->coins = state->coins + 2;
        -: 1172:			
        -: 1173:      //see if selected pile is in play
    #####: 1174:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1175:	{
    #####: 1176:	  return -1;
        -: 1177:	}
        -: 1178:			
        -: 1179:      //add embargo token to selected supply pile
    #####: 1180:      state->embargoTokens[choice1]++;
        -: 1181:			
        -: 1182:      //trash card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case outpost:
        -: 1187:      //set outpost flag
    #####: 1188:      state->outpostPlayed++;
        -: 1189:			
        -: 1190:      //discard card
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1192:      return 0;
        -: 1193:		
        -: 1194:    case salvager:
        -: 1195:      //+1 buy
    #####: 1196:      state->numBuys++;
        -: 1197:			
    #####: 1198:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1199:	{
        -: 1200:	  //gain coins equal to trashed card
    #####: 1201:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1202:	  //trash card
    #####: 1203:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1204:	}
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case sea_hag:
    #####: 1211:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1212:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1213:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1214:	  state->discardCount[i]++;
    #####: 1215:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1216:	}
        -: 1217:      }
    #####: 1218:      return 0;
        -: 1219:		
        -: 1220:    case treasure_map:
        -: 1221:      //search hand for another treasure_map
    #####: 1222:      index = -1;
    #####: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1226:	    {
    #####: 1227:	      index = i;
    #####: 1228:	      break;
        -: 1229:	    }
        -: 1230:	}
    #####: 1231:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1232:	{
        -: 1233:	  //trash both treasure cards
    #####: 1234:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1235:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1236:
        -: 1237:	  //gain 4 Gold cards
    #####: 1238:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1239:	    {
    #####: 1240:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1241:	    }
        -: 1242:				
        -: 1243:	  //return success
    #####: 1244:	  return 1;
        -: 1245:	}
        -: 1246:			
        -: 1247:      //no second treasure_map found in hand
    #####: 1248:      return -1;
        -: 1249:    }
        -: 1250:	
    #####: 1251:  return -1;
        -: 1252:}
        -: 1253:
function discardCard called 4 returned 100% blocks executed 78%
        4: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:	
        -: 1257:  //if card is not trashed, added to Played pile 
        4: 1258:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1259:    {
        -: 1260:      //add card to played pile
        4: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:	
        -: 1265:  //set played card to -1
        4: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:	
        -: 1268:  //remove card from player's hand
        4: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
        4: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else 	
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
        4: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
        4: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
        4: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:	
        4: 1289:  return 0;
        -: 1290:}
        -: 1291:
function gainCard called 2 returned 100% blocks executed 80%
        2: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:	
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1297:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
        2: 1307:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
        2: 1312:  else if (toFlag == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1313:    {
        1: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
        1: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:	
        -: 1323:  //decrease number in supply pile
        2: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:	 
        2: 1326:  return 0;
        -: 1327:}
        -: 1328:
function updateCoins called 9 returned 100% blocks executed 82%
        9: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:	
        -: 1333:  //reset coin count
        9: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
       54: 1337:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1338:    {
       45: 1339:      if (state->hand[player][i] == copper)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
        -: 1340:	{
       28: 1341:	  state->coins += 1;
        -: 1342:	}
       17: 1343:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1344:	{
    #####: 1345:	  state->coins += 2;
        -: 1346:	}
       17: 1347:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1348:	{
    #####: 1349:	  state->coins += 3;
        -: 1350:	}	
        -: 1351:    }	
        -: 1352:
        -: 1353:  //add bonus
        9: 1354:  state->coins += bonus;
        -: 1355:
        9: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
        -: 1361:
